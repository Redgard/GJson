-->begin
using System;
using System.IO;
using System.Collections;

-->namespace

public class Token
{
	public int kind;    // token kind
	public int pos;     // token position in bytes in the source text (starting at 0)
	public int charPos;  // token position in characters in the source text (starting at 0)
	public int col;     // token column (starting at 1)
	public int line;    // token line (starting at 1)
	public string val;  // token value
	public Token next;  // ML 2005-03-11 Tokens are kept in linked list
}

public class Buffer
{
	public const int EOF = char.MaxValue + 1;
	private readonly string _s;
	private int _bufPos;

	public Buffer(string s)
	{
		_s = s;
		_bufPos = 0;
	}

	public int Read()
	{
		return (_bufPos < _s.Length) ? _s[_bufPos++] : EOF;
	}

	public int Peek()
	{
		int curPos = Pos;
		int ch = Read();
		Pos = curPos;
		return ch;
	}

	public int Pos
	{
		get { return _bufPos; }
		set
		{
			if (value < 0 || value >= _s.Length)
				throw new FatalError("buffer out of bounds access, position: " + value);

			_bufPos = value;
		}
	}
}
	
public class Scanner
{
	const char EOL = '\n';
	const int eofSym = 0; /* pdt */
-->declarations

	public Buffer buffer; // scanner buffer
	
	Token t;          // current token
	int ch;           // current input character
	int pos;          // byte position of current character
	int charPos;      // position by unicode characters starting with 0
	int col;          // column number of current character
	int line;         // line number of current character
	int oldEols;      // EOLs that appeared in a comment;
	static readonly Hashtable start; // maps first token character to start state

	Token tokens;     // list of tokens already peeked (first token is a dummy)
	Token pt;         // current peek token
	
	char[] tval = new char[128]; // text of current token
	int tlen;         // length of current token
	
	static Scanner() 
	{
		start = new Hashtable(128);
-->initialization
	}
	
	public Scanner(string inputString)
	{
		buffer = new Buffer(inputString);
		Init();
	}
	
	private void Init()
	{
		pos = -1;
		line = 1;
		col = 0;
		charPos = -1;
		oldEols = 0;
		NextCh();
		pt = tokens = new Token(); // first token is a dummy
	}
	
	void NextCh()
	{
		if (oldEols > 0)
		{
			ch = EOL; oldEols--; 
		} 
		else
		{
			pos = buffer.Pos;
			ch = buffer.Read(); col++; charPos++;
			if (ch == '\r' && buffer.Peek() != '\n') ch = EOL;
			if (ch == EOL) { line++; col = 0; }
		}
-->casing1
	}

	void AddCh()
	{
		if (tlen >= tval.Length)
		{
			char[] newBuf = new char[2 * tval.Length];
			Array.Copy(tval, 0, newBuf, 0, tval.Length);
			tval = newBuf;
		}
		if (ch != Buffer.EOF)
		{
-->casing2
			NextCh();
		}
	}


-->comments

	void CheckLiteral()
	{
-->literals
	}

	Token NextToken() 
	{
		while (ch == ' ' ||
-->scan1
		) NextCh();
-->scan2
		int recKind = noSym;
		int recEnd = pos;
		t = new Token();
		t.pos = pos; t.col = col; t.line = line; t.charPos = charPos;
		int state;
		if (start.ContainsKey(ch)) { state = (int) start[ch]; }
		else { state = 0; }
		tlen = 0; AddCh();
		
		switch (state)
		{
			case -1: { t.kind = eofSym; break; } 
			case 0: 
			{
				if (recKind != noSym)
				{
					tlen = recEnd - t.pos;
					SetScannerBehindT();
				}
				t.kind = recKind; break;
			}
-->scan3
		}
		t.val = new String(tval, 0, tlen);
		return t;
	}
	
	private void SetScannerBehindT() 
	{
		buffer.Pos = t.pos;
		NextCh();
		line = t.line; col = t.col; charPos = t.charPos;
		for (int i = 0; i < tlen; i++) NextCh();
	}
	
	public Token Scan () 
	{
		if (tokens.next == null)
		{
			return NextToken();
		}
		else 
		{
			pt = tokens = tokens.next;
			return tokens;
		}
	}

	public Token Peek () 
	{
		do 
		{
			if (pt.next == null) 
			{
				pt.next = NextToken();
			}
			pt = pt.next;
		}
		while (pt.kind > maxT);
	
		return pt;
	}

	public void ResetPeek () { pt = tokens; }
} 
